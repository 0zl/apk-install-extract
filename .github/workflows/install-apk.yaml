name: Install APK

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      apk_zip_url:
        description: 'url to download apks zipped'
        required: true
        type: string
        default: ${{env.default_apk_url}}
env:
  avd_port: 9999
  avd_name: localhost:9999
  default_apk_url: https://github.com/clearbluejar/apk-install/releases/download/v0.0.1/example.apk.zip
  all_apk_dir: all_apks

jobs:
  generate-matrix:    
    runs-on: ubuntu-latest    
    outputs:
      apkpaths: ${{ steps.getpaths.outputs.apkpaths }}
    steps:      
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: download apks
        run: |
          mkdir ${{env.inputs.all_apk_dir}}
          # apk_zip_name=$(echo "${{env.inputs.apk_zip_url}}"  | rev | cut -d '/' -f 1 | rev)
          wget ${{env.inputs.apk_zip_url}} -O ${{env.inputs.all_apk_dir}}.zip
          unzip ${{env.inputs.all_apk_dir}}.zip -d ${{env.inputs.all_apk_dir}}

      - name: Setup paths
        id: getpaths
        run: |                              
          echo "apkpaths=$(python -c 'import pathlib; print([str(file) for file in pathlib.Path.glob(pathlib.Path("${{env.inputs.all_apk_dir}}"),"**/*.apk")])')" >> "$GITHUB_OUTPUT"          
        shell: bash

  download-install-and-extract:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:        
        apkpath: ${{fromJson(needs.generate-matrix.outputs.apkpaths)}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name : install adb
        run: | 
          sudo apt install adb aapt
      - name: install redroid dependencies
        run: |
          ## install required kernel modules          
          sudo apt install linux-modules-extra-`uname -r`
          sudo modprobe binder_linux devices="binder,hwbinder,vndbinder"
          sudo modprobe ashmem_linux          
      - name: run emulator
        run: |
          mkdir data
          docker run -itd --rm --privileged --pull always -v $(pwd)/data:/data -p ${{env.avd_port}}:5555 redroid/redroid:12.0.0-latest

      - name: adb connect install
        run: |                    
          adb connect ${{env.avd_name}}
          adb devices -l 
          adb -s ${{env.avd_name}} install ${{matrix.apkpath}}
          
      - name: adb start main activity
        run: |                    

          # start whatsapp https://stackoverflow.com/questions/59457014/start-whatsapp-chat-using-adb
          # adb -s localhost:5555 shell am start -n com.whatsapp/com.whatsapp.Main
          ## adb shell am start -n com.whatsapp/com.whatsapp.Main
          ./adb-run.sh ${{matrix.apkpath}}

      - name: get package name ver
        run : |
          echo "apkpkgver=$(./get-pkgver.sh ${{matrix.apkpath}})" >> "$GITHUB_ENV"
          echo "apkpkg=$(./get-pkg.sh ${{matrix.apkpath}})" >> "$GITHUB_ENV"
          echo "$apkpkgver"         
          echo "$apkpkg"     

      - name: aapt dump badging
        run: | 
          aapt dump badging ${{matrix.apkpath}} >  ${{ env.apkpkgver }}.badging.txt         
          cat ${{ env.apkpkgver }}.badging.txt
      
      - name: fix data permissions
        if: always()
        run: | 
          # stop docker containers
          docker stop $(docker ps -a -q)
          sudo chown -R runner:runner data
          tar cvzf ${{ env.apkpkgver }}.data.tar.gz data/data/${{ env.apkpkg }}
      
      - name: Upload data
        uses: actions/upload-artifact@v3
        if: always()
        with:
            name: apk_data
            path: ${{ env.apkpkgver }}*    
